// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("customers")
}

model MenuItemCategory {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     MenuItem[]

  @@map("menu_item_categories")
}

model MenuItem {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Float
  categoryId  String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    MenuItemCategory @relation(fields: [categoryId], references: [id])
  items       OrderItem[]

  @@map("menu_items")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  itemId    String
  quantity  Int
  subtotal  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  item      MenuItem @relation(fields: [itemId], references: [id])

  @@map("order_items")
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  status     OrderStatus @default(PENDING)
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customer   Customer    @relation(fields: [customerId], references: [id])
  items      OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DELIVERED

  @@map("order_statuses")
}
